// <auto-generated />
using System;
using DvdRentalDomain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

namespace DvdRental.Infra.Data.Migrations
{
    [DbContext(typeof(DvdRentalContext))]
    [Migration("20200911195238_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:mpaa_rating", "G,PG,PG-13,R,NC-17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.actor_actor_id_seq", "'actor_actor_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.address_address_id_seq", "'address_address_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.category_category_id_seq", "'category_category_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.city_city_id_seq", "'city_city_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.country_country_id_seq", "'country_country_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.customer_customer_id_seq", "'customer_customer_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.film_film_id_seq", "'film_film_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.inventory_inventory_id_seq", "'inventory_inventory_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.language_language_id_seq", "'language_language_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.payment_payment_id_seq", "'payment_payment_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.rental_rental_id_seq", "'rental_rental_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.staff_staff_id_seq", "'staff_staff_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.store_store_id_seq", "'store_store_id_seq', '', '1', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("DvdRentalDomain.Entities.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("actor_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("ActorId");

                    b.HasIndex("LastName")
                        .HasName("idx_actor_last_name");

                    b.ToTable("actor");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.ActorInfo", b =>
                {
                    b.Property<int?>("ActorId")
                        .HasColumnName("actor_id")
                        .HasColumnType("integer");

                    b.Property<string>("FilmInfo")
                        .HasColumnName("film_info")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.ToTable("actor_info");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("integer");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnName("district")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("AddressId");

                    b.HasIndex("CityId")
                        .HasName("idx_fk_city_id");

                    b.ToTable("address");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("CategoryId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("city_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City1")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId")
                        .HasName("idx_fk_country_id");

                    b.ToTable("city");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("country_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Country1")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("CountryId");

                    b.ToTable("country");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Active")
                        .HasColumnName("active")
                        .HasColumnType("integer");

                    b.Property<bool?>("Activebool")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("activebool")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("date")
                        .HasDefaultValueSql("('now'::text)::date");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<DateTime?>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("integer");

                    b.HasKey("CustomerId");

                    b.HasIndex("AddressId")
                        .HasName("idx_fk_address_id");

                    b.HasIndex("LastName")
                        .HasName("idx_last_name");

                    b.HasIndex("StoreId")
                        .HasName("idx_fk_store_id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.CustomerList", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("Sid")
                        .HasColumnName("sid")
                        .HasColumnType("integer");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.ToTable("customer_list");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("film_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("Fulltext")
                        .IsRequired()
                        .HasColumnName("fulltext")
                        .HasColumnType("tsvector");

                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<short?>("Length")
                        .HasColumnName("length")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnName("release_year")
                        .HasColumnType("integer");

                    b.Property<short>("RentalDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rental_duration")
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("3");

                    b.Property<decimal>("RentalRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rental_rate")
                        .HasColumnType("numeric(4,2)")
                        .HasDefaultValueSql("4.99");

                    b.Property<decimal>("ReplacementCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("replacement_cost")
                        .HasColumnType("numeric(5,2)")
                        .HasDefaultValueSql("19.99");

                    b.Property<string[]>("SpecialFeatures")
                        .HasColumnName("special_features")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("FilmId");

                    b.HasIndex("Fulltext")
                        .HasName("film_fulltext_idx")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.HasIndex("LanguageId")
                        .HasName("idx_fk_language_id");

                    b.HasIndex("Title")
                        .HasName("idx_title");

                    b.ToTable("film");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.FilmActor", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnName("actor_id")
                        .HasColumnType("integer");

                    b.Property<int>("FilmId")
                        .HasColumnName("film_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("ActorId", "FilmId")
                        .HasName("film_actor_pkey");

                    b.HasIndex("FilmId")
                        .HasName("idx_fk_film_id");

                    b.ToTable("film_actor");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.FilmCategory", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnName("film_id")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("FilmId", "CategoryId")
                        .HasName("film_category_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("film_category");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.FilmList", b =>
                {
                    b.Property<string>("Actors")
                        .HasColumnName("actors")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int?>("Fid")
                        .HasColumnName("fid")
                        .HasColumnType("integer");

                    b.Property<short?>("Length")
                        .HasColumnName("length")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(4,2)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.ToTable("film_list");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FilmId")
                        .HasColumnName("film_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("integer");

                    b.HasKey("InventoryId");

                    b.HasIndex("FilmId");

                    b.HasIndex("StoreId", "FilmId")
                        .HasName("idx_store_id_film_id");

                    b.ToTable("inventory");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("language_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.HasKey("LanguageId");

                    b.ToTable("language");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.NicerButSlowerFilmList", b =>
                {
                    b.Property<string>("Actors")
                        .HasColumnName("actors")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int?>("Fid")
                        .HasColumnName("fid")
                        .HasColumnType("integer");

                    b.Property<short?>("Length")
                        .HasColumnName("length")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(4,2)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.ToTable("nicer_but_slower_film_list");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(5,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnName("payment_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RentalId")
                        .HasColumnName("rental_id")
                        .HasColumnType("integer");

                    b.Property<int>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("integer");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerId")
                        .HasName("idx_fk_customer_id");

                    b.HasIndex("RentalId")
                        .HasName("idx_fk_rental_id");

                    b.HasIndex("StaffId")
                        .HasName("idx_fk_staff_id");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rental_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryId")
                        .HasColumnName("inventory_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnName("rental_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnName("return_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("integer");

                    b.HasKey("RentalId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InventoryId")
                        .HasName("idx_fk_inventory_id");

                    b.HasIndex("StaffId");

                    b.HasIndex("RentalDate", "InventoryId", "CustomerId")
                        .IsUnique()
                        .HasName("idx_unq_rental_rental_date_inventory_id_customer_id");

                    b.ToTable("rental");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.SalesByFilmCategory", b =>
                {
                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("TotalSales")
                        .HasColumnName("total_sales")
                        .HasColumnType("numeric");

                    b.ToTable("sales_by_film_category");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.SalesByStore", b =>
                {
                    b.Property<string>("Manager")
                        .HasColumnName("manager")
                        .HasColumnType("text");

                    b.Property<string>("Store")
                        .HasColumnName("store")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalSales")
                        .HasColumnName("total_sales")
                        .HasColumnType("numeric");

                    b.ToTable("sales_by_store");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staff_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<byte[]>("Picture")
                        .HasColumnName("picture")
                        .HasColumnType("bytea");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.HasKey("StaffId");

                    b.HasIndex("AddressId");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.StaffList", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("Sid")
                        .HasColumnName("sid")
                        .HasColumnType("integer");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.ToTable("staff_list");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ManagerStaffId")
                        .HasColumnName("manager_staff_id")
                        .HasColumnType("integer");

                    b.HasKey("StoreId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ManagerStaffId")
                        .IsUnique()
                        .HasName("idx_unq_manager_staff_id");

                    b.ToTable("store");
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Address", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_address_city")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.City", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_city")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Customer", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Address", "Address")
                        .WithMany("Customer")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("customer_address_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Film", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Language", "Language")
                        .WithMany("Film")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("film_language_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.FilmActor", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Actor", "Actor")
                        .WithMany("FilmActor")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("film_actor_actor_id_fkey")
                        .IsRequired();

                    b.HasOne("DvdRentalDomain.Entities.Film", "Film")
                        .WithMany("FilmActor")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("film_actor_film_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.FilmCategory", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Category", "Category")
                        .WithMany("FilmCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("film_category_category_id_fkey")
                        .IsRequired();

                    b.HasOne("DvdRentalDomain.Entities.Film", "Film")
                        .WithMany("FilmCategory")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("film_category_film_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Inventory", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Film", "Film")
                        .WithMany("Inventory")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("inventory_film_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Payment", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Customer", "Customer")
                        .WithMany("Payment")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("payment_customer_id_fkey")
                        .IsRequired();

                    b.HasOne("DvdRentalDomain.Entities.Rental", "Rental")
                        .WithMany("Payment")
                        .HasForeignKey("RentalId")
                        .HasConstraintName("payment_rental_id_fkey")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DvdRentalDomain.Entities.Staff", "Staff")
                        .WithMany("Payment")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("payment_staff_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Rental", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Customer", "Customer")
                        .WithMany("Rental")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("rental_customer_id_fkey")
                        .IsRequired();

                    b.HasOne("DvdRentalDomain.Entities.Inventory", "Inventory")
                        .WithMany("Rental")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("rental_inventory_id_fkey")
                        .IsRequired();

                    b.HasOne("DvdRentalDomain.Entities.Staff", "Staff")
                        .WithMany("Rental")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("rental_staff_id_key")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Staff", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Address", "Address")
                        .WithMany("Staff")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("staff_address_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("DvdRentalDomain.Entities.Store", b =>
                {
                    b.HasOne("DvdRentalDomain.Entities.Address", "Address")
                        .WithMany("Store")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("store_address_id_fkey")
                        .IsRequired();

                    b.HasOne("DvdRentalDomain.Entities.Staff", "ManagerStaff")
                        .WithOne("Store")
                        .HasForeignKey("DvdRentalDomain.Entities.Store", "ManagerStaffId")
                        .HasConstraintName("store_manager_staff_id_fkey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
